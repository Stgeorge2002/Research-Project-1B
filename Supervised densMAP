import subprocess
import sys

# Ensure all required packages are installed
def ensure_packages_installed():
    required_packages = ["umap-learn", "pandas", "numpy", "matplotlib", "scikit-learn"]
    for package in required_packages:
        try:
            __import__(package)
        except ImportError:
            subprocess.check_call([sys.executable, "-m", "pip", "install", package])

# ensure_packages_installed()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.widgets import LassoSelector
from matplotlib.path import Path
from sklearn.preprocessing import RobustScaler
import umap.umap_ as umap

# Load your dataset
def load_data(filepath):
    return pd.read_csv(filepath)

# Convert categorical labels to numerical labels
def encode_labels(labels):
    label_codes, uniques = pd.factorize(labels)
    return label_codes, dict(enumerate(uniques))

# DensMAP analysis function
def run_densmap(data, target, n_neighbors=15, min_dist=0.1, n_components=2, metric='chebyshev', densmap=True, dens_lambda=1.0):
    reducer = umap.UMAP(n_neighbors=n_neighbors, min_dist=min_dist, n_components=n_components, random_state=42,
                        metric=metric, target_weight=0., densmap=densmap, dens_lambda=dens_lambda)
    embedding = reducer.fit_transform(data, y=target)
    return embedding

# Main script
if __name__ == "__main__":
    # Load the data
    filepath = 'C:/Users/theoa/OneDrive/Desktop/Bath/Research Project 1B/DATA/lime and sharp/more_cleaned_Mnone.csv'
    data = load_data(filepath)
    data_for_densmap = data.iloc[:, 10:]  # Assuming features start from the 7th column
    identifiers = data['Identifier']  # Assuming 'Identifier' column exists
    treatments = data['Treatment (1 d)']  # This will be used as the target for DensMAP

    # Encode treatment labels
    treatment_codes, treatment_map = encode_labels(treatments)

    # Preprocess the data
    scaler = RobustScaler()
    data_scaled = scaler.fit_transform(data_for_densmap)

    # Run DensMAP with encoded treatment labels as the target
    densmap_results = run_densmap(data_scaled, treatment_codes)

    # Prepare the DataFrame for plotting
    densmap_df = pd.DataFrame(densmap_results, columns=['DensMAP-1', 'DensMAP-2'])
    densmap_df['Identifier'] = identifiers
    densmap_df['Treatment (1 d)'] = treatments

    # Define the color mapping for each unique treatment
    unique_treatments = data['Treatment (1 d)'].unique()
    color_map = {treatment: plt.cm.tab10(i) for i, treatment in enumerate(unique_treatments)}

    # Plot using matplotlib for 2D visualization with transparency and legend
    fig, ax = plt.subplots(figsize=(10, 8))
    colors = [color_map[treatment] for treatment in densmap_df['Treatment (1 d)']]
    scatter = ax.scatter(densmap_df['DensMAP-1'], densmap_df['DensMAP-2'], c=colors, s=20, alpha=0.2)  # Added alpha for transparency
    ax.set_title('2D DensMAP Projection')
    ax.set_xlabel('DensMAP-1')
    ax.set_ylabel('DensMAP-2')

    # Create a legend
    from matplotlib.patches import Patch
    legend_handles = [Patch(color=color_map[treatment], label=treatment) for treatment in unique_treatments]
    ax.legend(handles=legend_handles, title="Treatments")

    # Rest of the code for lasso selection and plotting remains unchanged
    # Function to handle the selection of data points
    def onselect(verts):
        path = Path(verts)
        ind = np.nonzero(path.contains_points(scatter.get_offsets()))[0]  # Get index of points within the path
        selected_identifiers = densmap_df.iloc[ind]['Identifier'].tolist()  # Retrieve identifiers using these indices
        
        # Save selected identifiers to a text file
        with open('C:/Users/theoa/OneDrive/Desktop/Bath/Research Project 1B/OUTPUT2D/selected_identifiers.txt', 'w') as f:
            for identifier in selected_identifiers:
                f.write("%s\n" % identifier)
        
        print(f"Selected {len(selected_identifiers)} data points. Identifiers saved to 'selected_identifiers.txt'.")

    # Create the lasso selector
    lasso = LassoSelector(ax, onselect, useblit=True)

    plt.show()
