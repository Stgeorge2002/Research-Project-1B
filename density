import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
import umap.umap_ as umap
import plotly.express as px

# Define a function to perform UMAP and generate a density contour plot
def umap_density_contour_plot(dataset_path):
    data = pd.read_csv(dataset_path)
    data_for_umap = data.iloc[:, 9:].fillna(0)
    combined_labels = data['Treatment (1 d)'].astype(str) + ' - ' + data['Coating (7 d)'].astype(str)
    combined_labels = combined_labels.astype('category').cat.codes

    scaler = StandardScaler()
    data_scaled = scaler.fit_transform(data_for_umap)

    umap_model = umap.UMAP(n_neighbors=9, min_dist=0.001, spread=1, n_components=2, 
                           metric="chebyshev", n_jobs=1, random_state=42, target_weight=0.4)
    umap_results = umap_model.fit_transform(data_scaled, y=combined_labels)

    umap_df = pd.DataFrame(umap_results, columns=['UMAP-1', 'UMAP-2'])
    umap_df['Combined_Label'] = data['Treatment (1 d)'].astype(str) + ' - ' + data['Coating (7 d)'].astype(str)

    unique_labels = umap_df['Combined_Label'].unique()
    color_palette = px.colors.qualitative.Plotly
    color_map = {label: color_palette[i % len(color_palette)] for i, label in enumerate(unique_labels)}

    fig = px.density_contour(umap_df, x='UMAP-1', y='UMAP-2', color='Combined_Label',
                             color_discrete_map=color_map, nbinsx=100, nbinsy=100, histfunc='count')
    fig.update_traces(contours_coloring='fill', contours_showlabels=True, line_width=2)  # Increased line width
    fig.update_layout(title='2D UMAP Density Plot', plot_bgcolor='black')

    return fig

# Example usage
# Assuming the dataset is correctly defined
# Uncomment the following line to test the function with the actual dataset path
fig = umap_density_contour_plot('C:/Users/theoa/OneDrive/Desktop/Bath/Research Project 1B/DATA/trimmed_dataset.csv')
fig.show()

# Note: Replace 'path_to_your_dataset.csv' with the actual path to your dataset when testing.
