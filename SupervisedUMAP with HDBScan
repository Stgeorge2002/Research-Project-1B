import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
import umap.umap_ as umap
import hdbscan

# Load the dataset
def load_data(filepath):
    return pd.read_csv(filepath)

# Define UMAP function
# UMAP analysis function
def run_umap(data, target, n_neighbors=9, min_dist=0.001, n_components=2, metric='chebyshev'):
    reducer = umap.UMAP(n_neighbors=n_neighbors, min_dist=min_dist, n_components=n_components, random_state=42, metric=metric, target_weight=0.4)
    embedding = reducer.fit_transform(data, y=target)
    return embedding

# Define HDBSCAN function
def perform_hdbscan(data, min_cluster_size=15, min_samples=3):
    clusterer = hdbscan.HDBSCAN(min_cluster_size=min_cluster_size, min_samples=min_samples, gen_min_span_tree=True)
    cluster_results = clusterer.fit(data)
    return cluster_results.labels_, cluster_results.probabilities_

# Convert categorical labels to numerical labels
def encode_labels(labels):
    label_codes, uniques = pd.factorize(labels)
    return label_codes, dict(enumerate(uniques))

# Main execution block
if __name__ == "__main__":
    filepath = 'C:/Users/theoa/OneDrive/Desktop/Bath/Research Project 1B/DATA/trimmed_dataset.csv'
    data = load_data(filepath)
    data_for_umap = data.iloc[:, 9:].fillna(0)  # Adjust if features start elsewhere
    treatments = data['Treatment (1 d)']
    # Scale the data
    scaler = StandardScaler()
    data_scaled = scaler.fit_transform(data_for_umap)

    treatment_codes, treatment_map = encode_labels(treatments)

    # Run UMAP
    umap_embedding = run_umap(data_scaled, treatment_codes)

    # Perform HDBSCAN clustering
    cluster_labels, probabilities = perform_hdbscan(umap_embedding)

    # Create a plot distinguishing clustered points from noise
    clustered = (cluster_labels >= 0)
    plt.figure(figsize=(12, 10))
    plt.scatter(umap_embedding[~clustered, 0], umap_embedding[~clustered, 1], color='gray', s=50, label='Noise')
    plt.scatter(umap_embedding[clustered, 0], umap_embedding[clustered, 1], c=cluster_labels[clustered], cmap='tab10', s=50)
    plt.title('UMAP projection of the Dataset', fontsize=20)
    plt.xlabel('UMAP-1', fontsize=14)
    plt.ylabel('UMAP-2', fontsize=14)
    plt.legend()
    plt.grid(True)
    plt.show()
